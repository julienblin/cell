{
  "name": "mongoose-fakery",
  "version": "0.1.7",
  "description": "Fixtures replacement and random data generator for mongoose.",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:alexmic/mongoose-fakery.git"
  },
  "keywords": [
    "mongoose",
    "testing",
    "random",
    "data",
    "generator",
    "fixtures",
    "stub",
    "unit"
  ],
  "author": {
    "name": "Alex Michael"
  },
  "license": "MIT",
  "devDependencies": {
    "chai": "1.5.x",
    "mocha": "1.8.x",
    "mongoose": "3.6.0"
  },
  "readme": "# mongoose-fakery\n\n`mongoose-fakery` provides an easy fixture replacement method and random data generators.\n\n## Inspiration\n\nParts of `mongoose-fakery` where inspired by:\n* [factory-boy](https://github.com/dnerdy/factory_boy)\n* [factory-lady](https://github.com/petejkim/factory-lady)\n* [faker](https://github.com/marak/Faker.js/)\n\nThanks.\n\n## Contributing\n\n1. Clone the repo.\n2. Create a branch.\n3. Write awesome code.\n4. Add tests for your changes. Test dependencies are defined in `package.json`.\n5. Open a Pull Request.\n6. Receive a 'Thank you!' and possibly a digital beer from me.\n\n## License\n\nMIT.\n\n## TODO\n\n1. Associations with other models. This is my first priority.\n2. Browser compatibility.\n3. Add more data generators.\n\n## Documentation\n\n### Installing\n\n```js\nnpm install mongoose-fakery\n```\n\n### Creating a fakery (factory)\n\nIn your `models.js`:\n```js\nvar mongoose = require('mongoose')\n  , Schema = mongoose.Schema;\n\nvar UserSchema = new Schema({\n    name: String,\n    surname: String\n});\n\nmongoose.model('User', UserSchema);\n```\n\nIn your tests or fixture files:\n```js\nvar fakery = require('mongoose-fakery');\n\nfakery.fake('user', mongoose.model('User'), {\n    name: 'john',\n    surname: 'doe'\n});\n```\n\n### Getting a fakery\n\nIf the only argument you pass into `fake()` is the name of the factory then\nthe method becomes a getter.\n\n```js\nvar userFakery = fakery.fake('user');\n```\n\n### Lazy attributes\n\n'Lazy' attributes are attributes that are resolved during a 'second' pass over\nthe attributes of the fakery. Common usage are attributes that depend\non other attributes for their value.\n\nTo create a 'lazy' attribute use `fakery.lazy()`:\n```js\nfakery.fake('user', mongoose.model('User'), {\n    name: 'john',\n    surname: 'doe',\n    email: fakery.lazy(function(attrs) {\n        // this will return john@example.com\n        return attrs.name + '@example.com';\n    });\n});\n```\n\nEach lazy attribute receives all the resolved attributes of the first pass as\nthe only parameter.\n\n### Using data generators\n\nData generators are functions that return data. That data can be random or follow\nspecific patterns. `mongoose-fakery` comes with a number of pre-defined data generators\nwhich will probably suit most of your needs i.e:\n\n1. random strings (hex, alpha, alphanum)\n2. random numbers\n3. random booleans (true/false)\n4. lorem generator\n5. name, surname and gender\n6. picking random items from lists\n\nPre-defined data generators are exposed under the `g` attribute of the `fakery`\nobject. Take a look in `data_providers.js` to see all the available generators\nand their APIs.\n\nSome examples:\n\n```js\n// using the user model defined above\nfakery.fake('user', mongoose.model('User'), {\n    name: fakery.g.name(),\n    surname: fakery.g.surname()\n});\n```\n\nGenerators can also be used in arrays and nested attributes:\n\n```js\nfakery.fake('post', mongoose.model('Post'), {\n    name: fakery.g.name(),\n    // this will create tags 'projects', <random string>, 'tech'\n    tags: ['projects', fakery.g.str(5), 'tech']\n});\n```\n\nData generators can also be used when you just want to generate a bunch of random\ndata for whatever purpose. They are not specific to test factories:\n\n```js\nvar fakery = require('mongoose-fakery');\n\n// generate 10 random full names\nvar names = [], i;\nfor (i = 0; i < 10; i++) {\n    names.push(fakery.g.fullname());\n}\n```\n\n### Creating custom data generators\n\n`mongoose-fakery` gives you the option to create custom generators that attach\nthemselves to the `g` attribute to the `fakery` object:\n\n```js\n// declare like this\nfakery.generator('custom', function() {\n    return 'custom';\n});\n\n// use like this\nvar customGenerator = fakery.g.custom();\ncustomGenerator(); // returns 'custom'\n```\n\nAs you might have guessed, generators wrap 'data provider' methods in a function.\nYou can thus do things like:\n\n```js\nfakery.generator('timesTwo', function(n) {\n    return n*2;\n});\n\nvar timesTwo = fakery.g.timesTwo();\ntimesTwo(2); // returns 4\n```\n\n### Making a fake model\n\nTo make a fake model, use the `make()` method. `make()` can also receive overrides.\n\n```js\nvar model = fakery.make('user');\nvar modelWithOverrides = fakery.make('user', {\n    name: 'override'\n});\n```\n\nNote that the model is *not* saved to the database.\n\n### Making & saving a fake model\n\nTo make and save a fake model, use the `makeAndSave()` method.\n\n```js\nfakery.makeAndSave('user', function(err, user) {\n    // `user` is saved to the database at this point\n});\n\nfakery.makeAndSave('user', {name: 'override'}, function(err, user) {\n    // `user` is saved to the database and name is overriden to 'override'.\n});\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexmic/mongoose-fakery/issues"
  },
  "_id": "mongoose-fakery@0.1.7",
  "dist": {
    "shasum": "7b66ff9c7fdd4ed3c7099e40a00c3b7aa593dc7d"
  },
  "_from": "mongoose-fakery@0.1.7",
  "_resolved": "https://registry.npmjs.org/mongoose-fakery/-/mongoose-fakery-0.1.7.tgz"
}
